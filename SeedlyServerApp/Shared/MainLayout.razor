@using Grpc.Core;
@using Grpc.Net.Client;
@using Grpc.Net.Client.Web;
@using LibSeedy;
@using Microsoft.Win32.SafeHandles
@inherits LayoutComponentBase

<div class="page">
    
<MudThemeProvider />

<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Tertiary">
            <MudIcon Icon="@Icons.Material.Filled.Grass"></MudIcon>
            <MudText Typo="Typo.h5" Class="ml-3">Seedly</MudText>
        <MudSpacer />
    </MudAppBar>
    <MudMainContent>
            <MudGrid Spacing="0" Justify="Justify.FlexStart" Class="pa-4">
            <MudItem xs="12">
                <MudTextField  @bind-Value="Search" Label="Enter magnet link" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Download" AdornmentColor="Color.Primary" 
                               OnAdornmentClick="Callback"/>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.h4">Completed Items</MudText>
                <MudList>
                    @foreach (var item in CompletedItems.TakeLast(5).Reverse())
                    {
                        if (item.status == Status.Success)
                        {
                            <MudListItem Avatar="@Icons.Material.Filled.Check">
                                @item.magnet_url
                            </MudListItem>
                        }
                        else if (item.status == Status.Fail)
                        {
                            <MudListItem Avatar="@Icons.Material.Filled.Cancel">
                                @item.magnet_url
                            </MudListItem>
                        }
                    }
                </MudList>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.h4">Current Items</MudText>
            </MudItem>
            <MudDivider />
            @foreach (var item in items)
            {
                <MudItem xs="4" Style="overflow: hidden">
                    <MudStack>
                        <MudItem>
                                <MudText Typo="Typo.button">@item.magnet_url</MudText>
                        </MudItem>
                        <MudItem>
                            <MudTreeView T="string">
                                <MudTreeViewItem Value="@("Files")" Style="overflow:hidden">
                                    @foreach (var file in item.files)
                                    {
                                        <MudTreeViewItem Value="@(file)" />
                                    }
                                </MudTreeViewItem>
                            </MudTreeView>
                        </MudItem>
                    </MudStack>
                </MudItem>
                <MudItem xs="7">
                    <MudProgressLinear Color="Color.Success" Striped="true" Size="Size.Large" Value="@item.progress_value" Min="0" Max="100">
                    <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                        <b>@item.progress_value.ToString()%</b>
                    </MudText>
                      
                    </MudProgressLinear>
                </MudItem>
                <MudItem xs="1">
                    <MudContainer MaxWidth="MaxWidth.Medium">
                    @if(item.status == Status.Downloading)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Pause"></MudIcon>
                    }
                    else if(item.status == Status.Pause)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.PlayArrow"></MudIcon>
                    }
                    </MudContainer>
                </MudItem>
            }
        </MudGrid>
    </MudMainContent>
</MudLayout>

    @code {
        public string Search { get; set;}
        public List<DownloadItem> items = new List<DownloadItem>();
        public List<DownloadItem> CompletedItems = new List<DownloadItem>();
        public GrpcChannel channel = GrpcChannel.ForAddress("http://localhost:50051");
        public CancellationTokenSource cts = new CancellationTokenSource((int)TimeSpan.FromDays(1).TotalMilliseconds);
        public enum Status
        {
            Downloading,
            Success,
            Fail,
            Pause
        }
        public class DownloadItem
        {
            public string magnet_url { get; set; }
            public int progress_value { get; set; }
            public bool _disposed;
            public void Dispose() => _disposed = true;
            public Status status { get; set; }
            public List<string> files { get; set; }
            public DownloadItem(string url, Status stat)
            {
                magnet_url = url;
                progress_value = 0;
                status = stat;
                files = new List<string>();
            }
        }
        private async Task Callback(MouseEventArgs obj)
        {
            items.Add(new DownloadItem(Search, Status.Downloading));
            Search = string.Empty;
            StateHasChanged();
            await SimulateProgress(cts.Token);
        }

        public async Task SimulateProgress(CancellationToken cancellationToken)
        {
            await channel.ConnectAsync();
            var client = new Seedly.Seedly.SeedlyClient(channel);

            var item = items.Last();
            item.progress_value = 0;
            item.status = Status.Downloading;

            Uri uri = new Uri(item.magnet_url);
            string fileName = System.IO.Path.GetFileName(uri.LocalPath);

            // Prepare the request
            var request = new Seedly.DownloadRequest
            { 
                Url = item.magnet_url,
                Outfile = fileName
            };

            // Create a call to the server streaming method
            using (var call = client.GetUpdateStream(request, cancellationToken: cancellationToken))
            {
                try
                {
                    await foreach (var response in call.ResponseStream.ReadAllAsync(cancellationToken))
                    {
                        //Console.WriteLine("Received number: " + response.ProgressInt);
                        item.progress_value = response.ProgressInt;
                        if (!string.IsNullOrEmpty(response.FileName))
                        {
                            item.magnet_url = response.FileName;
                        }
                        if (!string.IsNullOrEmpty(response.Items))
                        {
                            item.files = response.Items.Split(',').ToList();
                        }
                        StateHasChanged();
                        await Task.Delay(1);
                    }
                    item.status = Status.Success;
                }
                catch (RpcException ex) when (ex.Status.StatusCode == StatusCode.Cancelled)
                {
                    Console.WriteLine("The server stream was canceled.");
                    item.status = Status.Fail;
                }

                CompletedItems.Add(item);
                items.Remove(item);
                StateHasChanged();
                await Task.Delay(1);
                
            }
    }

}
</div>